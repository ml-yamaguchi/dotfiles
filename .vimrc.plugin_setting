" phpDocumentor
inoremap ;p <ESC>:call PhpDocSingle()<CR>i
nnoremap ;p :call PhpDocSingle()<CR>
vnoremap ;p :call PhpDocRange()<CR>


" NeoComplecache
set completeopt=menuone

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" neocomplcache-rsense
let g:rsenseHome=expand('~/local/lib/rsense-0.3')
let g:rsenseUseOmniFunc=1
let g:neocomplcache#sources#rsense#home_directory = expand('~/local/lib/rsense-0.3')

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
	\ 'default' : '',
	\ 'vimshell' : $HOME.'/.vimshell_hist',
	\ 'php' : $HOME . '/.vim/dict/php.dict',
		\ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
	let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" SuperTab like snippets behavior.
"imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
" inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" Enterキーで補完中は確定、それ意外は、通常の<CR>
inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() : "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()


""Omni Completion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

if !exists('g:neocomplcache_omni_patterns')
      let g:neocomplcache_omni_patterns={}
endif
let g:neocomplcache_omni_patterns.ruby='[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.php='[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c='\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp='\h\w*\%(\.\|->\)\h\w*\|\h\w*::'


" ポップアップメニューのカラーを設定
" hi Pmenu ctermbg=0
" hi PmenuSel ctermbg=4
" hi PmenuSbar ctermbg=2
" hi PmenuThumb ctermbg=3


hi Pmenu guibg=#666666
hi PmenuSel guibg=#8cd0d3 guifg=#666666
hi PmenuSbar guibg=#333333

"taglist
let Tlist_Ctags_Cmd = "/usr/bin/ctags"
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1

nnoremap ;tt       <Esc>:<C-u>:TrinityToggleAll<CR>

" バッファの切り替え
nnoremap <C-n>        <Esc>:<C-u>bn<CR>
inoremap <C-n>        <Esc>:<C-u>bn<CR>
" バッファを閉じる
nnoremap ;q       <Esc>:<C-u>bd<CR>

" NERDComments
" コメントにスペースを空ける
let NERDSpaceDelims = 1
" 未対応ファイルの警告を消す
let NERDShutUp = 1

" QuickRunPHPUnit
augroup QuickRunPHPUnit
  autocmd!
  autocmd BufWinEnter,BufNewFile *test.php set filetype=php.unit
augroup END

" 初期化
let g:quickrun_config = {}
" PHPUnit
let g:quickrun_config['php.unit'] = {'command': 'phpunit'}


" zencoding.vim
let g:user_zen_settings = { 'indentation':'  ',
\  'php': {
\   'snippets' : {
\       'php' : "<?php | ?>",
\       'phpif' : "<?php if (|): ?>",
\       'phpendif' : "<?php endif ?>",
\       'phpforeach' : "<?php foreach (|): ?>",
\       'phpendf' : "<?php endforeach ?>",
\       'phpdump' : "<?php var_dump(|) ?>",
\       'ar' : "array(|)",
\       }
\   }
\}



" vim-ref
let g:ref_phpmanual_path = $HOME.'/docs/php-chunked-xhtml'

autocmd FileType * nnoremap <silent><buffer> <Space>k :<C-u>Unite -start-insert -default-action=split ref/man<CR>
autocmd FileType erlang nnoremap <silent><buffer> <Space>k :<C-u>Unite -start-insert -default-action=split ref/erlang<CR>
autocmd FileType ruby nnoremap <silent><buffer> <Space>k :<C-u>Unite -start-insert -default-action=split ref/refe<CR>
autocmd FileType python nnoremap <silent><buffer> <Space>k :<C-u>Unite -start-insert -default-action=split ref/pydoc<CR>
autocmd FileType perl nnoremap <silent><buffer> <Space>k :<C-u>Unite -start-insert -default-action=split ref/perldoc<CR>
autocmd FileType php nnoremap <silent><buffer> <Space>k :<C-u>Unite -start-insert -default-action=split ref/phpmanual<CR>

