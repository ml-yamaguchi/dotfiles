""" bundleインストール設定
set nocompatible               " Be iMproved
filetype off                   " Required!
filetype plugin indent off     " Required!

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" Let NeoBundle manage NeoBundle
" NeoBundle 'Shougo/neobundle.vim'

" Recommended to install
" After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile
let g:make = 'gmake'
if system('uname -o') =~ '^GNU/'
        let g:make = 'make'
endif

NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }

NeoBundle 'vim-scripts/grep.vim'
NeoBundle 'vim-scripts/eregex.vim'

NeoBundle 'scrooloose/nerdtree' " {{
  NeoBundle 'jistr/vim-nerdtree-tabs'
  let g:nerdtree_tabs_focus_on_files=1
  NeoBundle 'Xuyuanp/nerdtree-git-plugin'
  " CTRL-e でTreeを開く
  map <C-e> <plug>NERDTreeTabsToggle<CR>
  " ブックマークメニューを初期表示
  let NERDTreeShowBookmarks=1
  " 非表示
  let NERDTreeIgnore=['\.vim$', '\~$']
  " ファイル指定なしでVimを起動した場合だけ表示
  " The NERD Treeのウィンドウだけが残るような場合にVimを終了
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" }}

NeoBundle 'kana/vim-submode' " {{
  let s:bundle = neobundle#get("vim-submode")
  function! s:bundle.hooks.on_source(bundle)
  " ウィンドウサイズ
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>+')
  call submode#map('winsize', 'n', '', '-', '<C-w>-')

  " タブ移動
  call submode#enter_with('changetab', 'n', '', 'gt', 'gt')
  call submode#enter_with('changetab', 'n', '', 'gT', 'gT')
  call submode#map('changetab', 'n', '', 't', 'gt')
  call submode#map('changetab', 'n', '', 'T', 'gT')
  endfunction
" }}

" 複数のテキストの削除、コピー履歴を記録し後からアクセスできる
NeoBundle 'vim-scripts/YankRing.vim' " {{
  " pでペーストしたあとに、CTRL-P, CTRL-Nで記録したテキストを参照

  " F7 で:YRShowを実行し履歴の表示
  nnoremap <silent> <F7> :<C-u>YRShow<CR>
  inoremap <silent> <F7> <ESC>:<C-u>YRShow<CR>

  let g:yankling_max_history = 10              " 記録する履歴の件数
  let g:yankling_window_height = 13            " 履歴全件を見れるように高さを調節
" }}



" 目的の単語へ素早くカーソルを移動する
NeoBundle 'Lokaltog/vim-easymotion' " {{
  let g:EasyMotion_leader_key =  ';'

  " スペース 2回 + w カーソル下の単語の先頭にキー表示
  " スペース 2回 + b カーソル上の単語の先頭にキー表示
  " スペース 2回 + j カーソル上の行の先頭にキー表示
  " スペース 2回 + k カーソル上の行の先頭にキー表示
" }}

" Colorscheme
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'vim-scripts/twilight'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'vim-scripts/Wombat'
NeoBundle 'tomasr/molokai'
NeoBundle 'vim-scripts/rdark'


" インデント量の違いをハイライト表示する
NeoBundle 'nathanaelkane/vim-indent-guides' " {{
  " <Leader(\)>igでON/OFF
  " 最初から有効にする
  let g:indent_guides_enable_on_vim_startup = 1
  " ガイドの幅
  let g:indent_guides_guide_size = 1

  let g:indent_guides_auto_colors = 0
  hi IndentGuidesOdd  ctermbg=233
  hi IndentGuidesEven ctermbg=233
" }}


NeoBundle 'pangloss/vim-javascript'

" ruby
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'skwp/vim-rspec'

" ;rsでspec実行
nnoremap <silent> ;rs :RunSpec<CR>
let g:rspec_command = "bin/spring rspec {spec}"


NeoBundle 'scrooloose/syntastic'

" Use the :sign interface to note errors.
let g:syntastic_enable_signs = 1
" Automatically open and close the location list.
let g:syntastic_auto_loc_list = 2
" Set syntax checkers.
let g:syntastic_ruby_checkers = ['rubocop']

" Ruby向けにendを自動挿入してくれる
NeoBundle 'tpope/vim-endwise'

" コメントON/OFFをCtrl --
NeoBundle 'tomtom/tcomment_vim'

NeoBundle 'slim-template/vim-slim.git'
NeoBundle 'junegunn/vim-easy-align'

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" vip<Enter>=
" visual-select inner paragraph
" Start EasyAlign command (<Enter>)
" Align around =
" gaip=
" Start EasyAlign command (ga) for inner paragraph
" Align around =

call neobundle#end()

set background=dark
colorscheme solarized
