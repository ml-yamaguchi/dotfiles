""" bundleインストール設定
set nocompatible               " Be iMproved
filetype off                   " Required!
filetype plugin indent off     " Required!

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" Let NeoBundle manage NeoBundle
" NeoBundle 'Shougo/neobundle.vim'

" Recommended to install
" After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile
let g:make = 'gmake'
if system('uname -o') =~ '^GNU/'
        let g:make = 'make'
endif
NeoBundle 'Shougo/vimproc.vim', {'build': {'unix': g:make}}


NeoBundle 'Shougo/vimfiler' " {{
  " ;e でvimfiler起動
  nnoremap <silent> ;e :<C-u>VimFiler<CR>
  let g:vimfiler_safe_mode_by_default=0
  let g:vimfiler_as_default_explorer=1
  " ウィンドウの操作
  " q vimfilerを隠す(バッファに残る)
  " Q vimfilerを閉じる(バッファに残らない)

  " 一覧表示
  " . 隠しファイル、フォルダの表示

  " ファイル操作
  " e カーソル上のファイルを編集
  " r ファイル名変更
  " E 縦分割して編集
  " N 新規ファイル作成
  " K 新規ディレクトリ作成
  " a actionを選択して実行
  " ? キーバインド一覧
" }}

NeoBundle 'Shougo/unite.vim' " {{
nnoremap [unite]    <Nop>
" ;をprefixに設定
nmap     ; [unite]

" 入力モードで開始する
" let g:unite_enable_start_insert=1

let g:unite_source_rec_max_cache_files = 5000

" ;b バッファ一覧
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
" ;t タブ一覧
nnoremap <silent> [unite]t :<C-u>Unite tab<CR>


" ;f ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite file_rec/async:!<CR>

" ;g 最近使用したファイル一覧
nnoremap <silent> [unite]g :<C-u>Unite file_mru<CR>
" ;h 常用セット
nnoremap <silent> [unite]h   :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>

au FileType unite nnoremap <silent> <buffer> <expr> <C-h> unite#do_action('left')
au FileType unite inoremap <silent> <buffer> <expr> <C-h> unite#do_action('left')
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('below')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('below')

au FileType unite nnoremap <silent> <buffer> <expr> <C-k> unite#do_action('above')
au FileType unite inoremap <silent> <buffer> <expr> <C-k> unite#do_action('above')

au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('right')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('right')
" Ctl + n タブで開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-n> unite#do_action('tabopen')
au FileType unite inoremap <silent> <buffer> <expr> <C-n> unite#do_action('tabopen')
" }}


nnoremap [TABCMD]  <nop>
nmap     <C-e> [TABCMD]

nnoremap <silent> [TABCMD]h :<c-u>tabfirst<cr>
nnoremap <silent> [TABCMD]l :<c-u>tablast<cr>
nnoremap <silent> [TABCMD]j :<c-u>tabnext<cr>
nnoremap <silent> [TABCMD]k :<c-u>tabprevious<cr>
nnoremap <silent> [TABCMD]n :<c-u>tabedit<cr>
nnoremap <silent> [TABCMD]q :<c-u>tabclose<cr>


NeoBundle 'Shougo/neomru.vim'

NeoBundle 'vim-scripts/grep.vim'
NeoBundle 'vim-scripts/eregex.vim'

" 複数のテキストの削除、コピー履歴を記録し後からアクセスできる
NeoBundle 'vim-scripts/YankRing.vim' " {{
  " pでペーストしたあとに、CTRL-P, CTRL-Nで記録したテキストを参照

  " F7 で:YRShowを実行し履歴の表示
  nnoremap <silent> <F7> :<C-u>YRShow<CR>
  inoremap <silent> <F7> <ESC>:<C-u>YRShow<CR>

  let g:yankling_max_history = 10              " 記録する履歴の件数
  let g:yankling_window_height = 13            " 履歴全件を見れるように高さを調節
" }}



" 目的の単語へ素早くカーソルを移動する
NeoBundle 'Lokaltog/vim-easymotion' " {{
  let g:EasyMotion_leader_key =  '<Space><Space>'

  " スペース 2回 + w カーソル下の単語の先頭にキー表示
  " スペース 2回 + b カーソル上の単語の先頭にキー表示
  " スペース 2回 + j カーソル上の行の先頭にキー表示
  " スペース 2回 + k カーソル上の行の先頭にキー表示
" }}

" Colorscheme
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'vim-scripts/twilight'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'vim-scripts/Wombat'
NeoBundle 'tomasr/molokai'
NeoBundle 'vim-scripts/rdark'


" インデント量の違いをハイライト表示する
NeoBundle 'nathanaelkane/vim-indent-guides' " {{
  " <Leader(\)>igでON/OFF
  " 最初から有効にする
  let g:indent_guides_enable_on_vim_startup = 1
  " ガイドの幅
  let g:indent_guides_guide_size = 1

  let g:indent_guides_auto_colors = 0
  hi IndentGuidesOdd  ctermbg=233
  hi IndentGuidesEven ctermbg=233
" }}


NeoBundle 'pangloss/vim-javascript'

" ruby
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'skwp/vim-rspec'

" ;rsでspec実行
nnoremap <silent> ;rs :RunSpec<CR>
let g:rspec_command = "bin/spring rspec {spec}"


NeoBundle 'scrooloose/syntastic'

" Use the :sign interface to note errors.
let g:syntastic_enable_signs = 1
" Automatically open and close the location list.
let g:syntastic_auto_loc_list = 2
" Set syntax checkers.
let g:syntastic_ruby_checkers = ['rubocop']

" Ruby向けにendを自動挿入してくれる
NeoBundle 'tpope/vim-endwise'

" コメントON/OFFをCtrl --
NeoBundle 'tomtom/tcomment_vim'

NeoBundle 'slim-template/vim-slim.git'
NeoBundle 'junegunn/vim-easy-align'

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" vip<Enter>=
" visual-select inner paragraph
" Start EasyAlign command (<Enter>)
" Align around =
" gaip=
" Start EasyAlign command (ga) for inner paragraph
" Align around =

call neobundle#end()

set background=dark
colorscheme solarized
